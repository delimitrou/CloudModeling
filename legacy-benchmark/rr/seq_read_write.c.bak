#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <stdint.h>
#include <inttypes.h>
#include <time.h>
#include <malloc.h>

volatile char *buf;

typedef int v4si __attribute__ ((vector_size (16)));

void main(int argc,char **args){
  if(argc < 2){
    printf("usage:%s <buffersize(KB)> <num>\n",args[0]);
    return;
  }
  else{
    struct timespec t1,t2,t3;
    register uint64_t bfsz = atoi(args[1])<<10;
    buf = (char *)memalign(1024,bfsz);
    register uint64_t count = atoi(args[2]);
    register uint64_t i, j;
    register v4si v128;
    volatile v4si vv128;
    register uint64_t v64 = 0x5a5a5a5a5a5a5a5aUL;
    volatile uint64_t vv64;
    register uint32_t v32 = 0x5a5a5a5a;
    volatile uint32_t vv32;
    register uint16_t v16 = 0x5a5a;
    volatile uint16_t vv16;
    register uint8_t v8 =   0x5a;
    volatile uint8_t vv8;
    for(j=0;j<bfsz;j++){
      buf[j] = 0x5a;
    }

    // write 10 times for warm-up:
    for(i=0;i<10;i++)
    for(j=0;j<bfsz>>3;j++){
      *((uint64_t *)buf+j) = v64;
    }
    
    
    clock_gettime(CLOCK_REALTIME, &t1);
    for(i=0;i<count;i++)
#if W==16
    for(j=0;j<bfsz>>4;j++){
      *((v4si*)buf+j) = v128;
    }
#elif W==8
    for(j=0;j<bfsz>>3;j++){
      *((uint64_t *)buf+j) = v64;
    }
#elif W==4
    for(j=0;j<bfsz>>2;j++){
      *((uint32_t *)buf+j) = v32;
    }
#elif W==2
    for(j=0;j<bfsz>>1;j++){
      *((uint16_t *)buf+j) = v16;
    }
#else
      for(j=0;j<bfsz;j++){
        buf[j] = v8;
      }
#endif
    clock_gettime(CLOCK_REALTIME, &t2);
    for(i=0;i<count;i++)
#if W==16
    for(j=0;j<bfsz>>4;j++){
      v128 = *((v4si*)buf+j);
    }
#elif W==8
    for(j=0;j<bfsz>>3;j++){
      v64 = *((uint64_t *)buf+j);
    }
#elif W==4
    for(j=0;j<bfsz>>2;j++){
      v32 = *((uint32_t *)buf+j);
    }
#elif W==2
    for(j=0;j<bfsz>>1;j++){
      v16 = *((uint16_t *)buf+j);
    }
#else
    for(j=0;j<bfsz;j++){
      v8 = buf[j];
    }
#endif
    clock_gettime(CLOCK_REALTIME, &t3);
    long write_ns = (t2.tv_sec-t1.tv_sec)*1000000000L + (t2.tv_nsec - t1.tv_nsec);
    long read_ns = (t3.tv_sec-t2.tv_sec)*1000000000L + (t3.tv_nsec - t2.tv_nsec);
    printf("%"PRIu64" %.3f %.3f\n",(bfsz>>10),((double)bfsz*count)/read_ns,((double)bfsz*count)/write_ns);
#if W==16
  vv128 = v128;
#elif W==8
  vv64 = v64;
#elif W==4
  vv32 = v32;
#elif W==2
  vv16 = v16;
#elif W==1
  vv8 = v8;
#endif
  }
}
